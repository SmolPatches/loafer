#+title: Loafer Research
* Loafer Notes
**TODO
- Make binary play files in linear order while checking the last watched
- Add back button (makes the seek value negative)
- Add skip button to go to end of the video
- Refactor Crate to have:
  - Separate Binaries
  - A library
  - Example binaries of how to use the library
- Finish Type State Validation
  - Request::Get struct variant
  - Request::Post
  - Rest of HTTP Options
- Look @ good http parsers in go / other languages and see how they do it(get inspired)
** Scope
Build Socket to Connect To MPV IPC
IPC should exposed
- Skip / Forward
- Add to queue of videos
HTML frontend
- To skip / control
- Add videos to queue and control playback
** MPV architecture
*** Embeddable C API
C API that control over playback (libmpv)
[[https://github.com/mpv-player/mpv/blob/master/libmpv/client.h]]
Rust Bindings Option is Available with  [[https://crates.io/crates/libmpv][libmpv-rs]]
*** C Plugins
[[https://mpv.io/manual/master/#c-plugins][here]]
Not really sure how this differs from libmpv, apparently it uses libmpv
Potential use case for Zig here if C Plugin route is taken
I can also write rust code to compile to .so file here and be used as a plugin
*** Lua / JS Scripting API
I believe these use libmpv as the backend so I could just use that instead
* HTTP Server
Loafer needs an rest server and a frontend/ui to trigger ipc events.
Simplest approach is a website hosted on an http server with an API endpoint(currently also http)
*** HTTP Parsing
The **REST** server needs to parse HTTP data to make sure this is valid
The approach I am taking is using a buffer reader to read lines
But this made me realize the actual lines need to be parsed, raising concerns
- regex is hacky and shameful
- string functions is morally wrong
So is the only solution lexical analysis?
2 Solutions are Lexical Analysis and State Machines
Look @ some http crates to see how they do it
- Nom, [[https://docs.rs/nom/latest/nom/#]]
Chatgpt Notes
#+BEGIN_VERSE
States:
1. Method State
2. URI State
3. Version State
4. End State (Complete parsing)

Transitions:
- Initial State: Method State
- Method State:
  - Transition to URI State upon encountering a whitespace character
- URI State:
  - Transition to Version State upon encountering a whitespace character
- Version State:
  - Transition to End State upon encountering '\r\n' (end of line)
- End State: Parsing complete

Actions:
- Accumulate characters for method, URI, and version fields
- Validate and process the parsed HTTP request line
State Machine
            +--------+     whitespace      +--------+
            | Method |-------------------> |   URI  |
            +--------+                     +--------+
                ^                              |
                |                              |
                |     whitespace               |
                +------------------------------+
                |
                v
            +--------+
            | Version|
            +--------+
                |
                |
                v
            +--------+
            |  End   |
            +--------+

#+END_VERSE
** Current Design
The current design tries to take advantage of some of these features.
It does a terrible job at it, and in the end is a glorified string checker.
The code isn't made to be touched by anyone including myself.
Currently the steps to run this program are:
1. Get the ip address from `iproute2`
2. use this ip to render the html template( sending forms to proper address )
3. start http api server
4. host the rendered template
5. Start mpv with
   ```bash
   #+BEGIN_SRC bash
   mpv episode.mkv --input-ipc-server=/tmp/loafer.sock
   #+END_SRC
** How to improvise
*** Fix Module Paths and Cargo Setup
Make a lib with some of the code then a binary to handle the startup
*** Combine the two http servers
Currently as described there are 2 HTTP Servers needed
- One for Hosting the UI(form to communicate to Control Center(tool that sends messages to mpv))
- One for parsing the ui and sending the data to msg mpv
The code for the 1st parser is currently being hosted by python3 -m http.server -b 0.0.0.0 8080.
Combine this python process into the rust main code(either by launching with process::Command or by real http server rust)
*** MPV ipc connections
MPV ipc connections are started manually.
with the command referenced above. Find a way to start mpv with the ipc server always or some other fancy smacy thing
